#!/usr/bin/env perl
#
#    Copyright (C) 2021 Genome Research Ltd.
#
#    Author: Shane McCarthy <sm15@sanger.ac.uk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

use strict;
use warnings;
use Carp;
use DBI;

my $opts = parse_params();
update_illumina_tracking($opts);

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "\nAbout: Update tracking information for Illumina\n",
        "Usage: tolqc-update_illumina_tracking\n",
        "\n";
}


sub parse_params
{
    my $opts = {
        root => '',
        label => '',
        email => '',
        mlims => 1,
    };
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-r' || $arg eq '--root' ) { $$opts{root} = shift(@ARGV); next; }
        elsif ( $arg eq '-l' || $arg eq '--label' ) { $$opts{label} = shift(@ARGV); next; }
        elsif ( $arg eq '-e' || $arg eq '--email' ) { $$opts{email} = shift(@ARGV); next; }
        elsif (                 $arg eq '--no-mlims' ) { $$opts{mlims} = 0; next; }
        elsif ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        else { error("Unknown option $arg"); }
    }
    $$opts{root} = "$ENV{TOLQCROOT}" if (exists $ENV{TOLQCROOT});
    error("--root [$$opts{root}] and --label [$$opts{label}] must be set") unless ($$opts{root} && $$opts{label});
    $$opts{base}=qq[$$opts{root}/track/$$opts{label}_illumina_data];
    $$opts{ignore} = read_list(qq[$$opts{base}.fofn.ignore]);
    $$opts{conf} = load_config($opts);
    $$opts{studies} = join('","', sort keys %{$$opts{conf}});
    return $opts;
}

sub update_illumina_tracking
{
    my ($opts) = @_;
    update_mlims($opts) if ($$opts{mlims});
    update_tracking_info($opts);
}

sub load_config
{
    my ($opts) = @_;
    my $conf = qq[$$opts{root}/track/$$opts{label}_track.conf];
    unless (-s $conf)
    {
        die(qq[Expected config file does not exist [$conf]]);
    }
    my $res;
    open(my $fh, "<$conf") || die("Could not open file for reading [$conf]");
    while(<$fh>)
    {
        chomp;
        my ($id,$subdir,$study) = split /\t/;
        $$res{$id} = { subdir => "$subdir", study => "$study" };
    }
    close($fh);
    return $res;
}

sub update_mlims
{
    my ($opts) = @_;

    die("Environment variable MLIMS_DATABASE not set") unless (exists $ENV{MLIMS_DATABASE});

    my $studies = $$opts{studies};
    my $cmd = qq[mysql --login-path=mlims $ENV{MLIMS_DATABASE} -e '
SELECT DISTINCT
    sample.public_name,
    sample.common_name,
    flowcell.pipeline_id_lims,
    sample.name,
    sample.supplier_name,
    sample.accession_number,
    sample.donor_id,
    sample.taxon_id,
    sample.description,
    run_lane_metrics.instrument_model,
    run_lane_metrics.id_run,
    flowcell.position,
    flowcell.tag_index,
    flowcell.tag_sequence,
    flowcell.tag2_sequence,
    run_status_dict.description as run_status,
    run_status.date,
    study.id_study_lims as study_id,
    study.name as study_name,
    flowcell.manual_qc

FROM mlwarehouse.sample

JOIN (mlwarehouse.iseq_flowcell as flowcell,
    mlwarehouse.iseq_run_status as run_status,
    mlwarehouse.iseq_product_metrics as product_metrics,
    mlwarehouse.iseq_run_lane_metrics as run_lane_metrics,
    iseq_run_status_dict as run_status_dict,
    mlwarehouse.study as study)

ON (flowcell.id_sample_tmp = sample.id_sample_tmp
    AND product_metrics.id_iseq_flowcell_tmp = flowcell.id_iseq_flowcell_tmp
    AND run_status.id_run = product_metrics.id_run
    AND run_status.id_run = run_lane_metrics.id_run
    AND run_status.id_run_status_dict = run_status_dict.id_run_status_dict
    AND flowcell.id_study_tmp = study.id_study_tmp)

WHERE study.id_study_lims in ( "$studies" ) AND run_status.iscurrent = 1;'];

    my $mlims = qq[$$opts{base}.lims.tsv];
    open(my $fh, ">$mlims.part") || die("Could not open file for writing [$mlims.part]");
    open(my $sqh, "$cmd |") || die("Could not open mysql command [$cmd]");
    while(<$sqh>)
    {
        next if /public_name/;
        # awk -F"\t" 'BEGIN{OFS="\t"}$10~/HiSeq/{print "/seq/"$11"/"$11"_"$12"#"$13".cram\t"$0} $10~/NovaSeq/{col=substr($11,0,2); print "/seq/illumina/runs/"col"/"$11"/lane"$12"/plex"$13"/"$11"_"$12"#"$13".cram\t"$0
        my @F = split /\t/;
        if ($F[9] =~ /[HM]iSeq/)
        {
            unshift @F, qq[/seq/$F[10]/$F[10]_$F[11]#$F[12].cram];
        }
        elsif ($F[9] =~ /NovaSeq/)
        {
            my $col = substr($F[10], 0, 2);
            unshift @F, qq[/seq/illumina/runs/$col/$F[10]/lane$F[11]/plex$F[12]/$F[10]_$F[11]#$F[12].cram];
        }
        else
        {
            die("Unknown Illumina platform [$F[9]]");
        }
        print $fh join("\t", @F);
    }
    close($sqh);
    close($fh);
    # clean up $mlims.part file if identical
    system(qq[cmp --silent $mlims $mlims.part && rm $mlims.part]) if (-s qq[$mlims.part]);
}

sub load_tracking_info
{
    my ($opts) = @_;
    my $info = {};
    return $info unless (-s qq[$$opts{base}.fofn]);
    open(my $fh, "<$$opts{base}.fofn") || die("Could not open file for reading [$$opts{base}.fofn]");
    while(<$fh>)
    {
        chomp;
        my ($bam, @F) = split /\t/;
        next if (exists $$opts{ignore}{$bam});
        $$info{$bam}{info} = join("\t", @F);
    }
    close($fh);
    return $info;
}

sub load_already_imported
{
    my ($opts) = @_;
    system(qq[cat $$opts{root}/data/*/*/*/genomic_data/*/*/IRODS*.fofn | grep -v pacbio | grep -v lustre > $$opts{base}.imported]);
    system(qq[cat $$opts{root}/data/*/*/*/transcriptomic_data/*/*/IRODS*.fofn | grep -v pacbio | grep -v lustre >> $$opts{base}.imported]);
    my $imported = read_list(qq[$$opts{base}.imported]);
    return $imported;
}

sub update_tracking_info
{
    my ($opts) = @_;
    my $info = load_tracking_info($opts);
    my $imported = load_already_imported($opts);
    my $new;
    my $diff;
    my $wh2;
    my $track = -s qq[$$opts{base}.lims.tsv.part] ? qq[$$opts{base}.lims.tsv.part] : qq[$$opts{base}.lims.tsv];
    open(my $fh, "<$track") || die("Could not open file for reading [$track]");
    while(<$fh>)
    {
        chomp;
        next if (/^Binary/);
        my ($bam, @F) = split /\t/;
        next if (exists $$opts{ignore}{$bam});
        if ($F[0] eq 'NULL')
        {
            if ($F[18] =~ /BAdASS/)
            {
                $F[0] = $F[4] unless ($F[4] eq 'NULL');
            }
            if ($F[0] eq 'NULL' || $F[5] !~ /^SAM/)
            {
                my @wh_info = get_wh_sample_info($F[3]);
                $$wh2{$bam}{info} = 1;
                if ($wh_info[0]) { $F[0] = $wh_info[0] unless ($F[0] ne 'NULL'); }
                if ($wh_info[1]) { $F[1] = $wh_info[1] unless ($F[1] ne 'NULL'); }
                if ($wh_info[2]) { $F[4] = $wh_info[2] unless ($F[4] ne 'NULL'); }
                if ($wh_info[3]) { $F[5] = $wh_info[3] unless ($F[5] ne 'NULL'); }
                if ($wh_info[4]) { $F[6] = $wh_info[4] unless ($F[6] ne 'NULL'); }
            }
        }
        my $current_info = join("\t", @F);
        if (exists $$info{$bam})
        {
            unless ($current_info eq $$info{$bam}{info})
            {
                $$diff{$bam} = qq[OLD:\t$bam\t$$info{$bam}{info}\nNEW:\t$bam\t$current_info\n];
            }
        }
        else
        {
            $$new{$bam}{info} = $current_info unless (exists $$imported{$bam});
        }
        $$info{$bam}{info} = $current_info;
        if (exists $$wh2{$bam})
        {
            $$wh2{$bam}{info} = $$info{$bam}{info};
        }
    }
    close($fh);
    if ($wh2)
    {
        write_info_to_file($wh2,"$$opts{base}.fofn.missing_metadata");
    }
    if ($diff)
    {
        open(my $fh, ">$$opts{base}.fofn.diff") || die("Could not write to file [$$opts{base}.fofn.diff]");
        foreach my $bam (sort keys %$diff)
        {
            print $fh qq[$$diff{$bam}];
        }
        close($fh);
        my $diff_txt = `cut -f1,3- $$opts{base}.fofn.diff`;
        send_email($$opts{email},"modified metadata for $$opts{label} Illumina data in iRODS", $diff_txt) if ($$opts{email});
    }
    else
    {
        system(qq[rm -f $$opts{base}.fofn.diff]) if (-e "$$opts{base}.fofn.diff");
    }
    if ($new)
    {
        write_info_to_file($new,"$$opts{base}.fofn.new");
        my $new_txt = '';
        foreach my $id (keys %{$$opts{conf}})
        {
            next unless (`awk -F"\\t" '\$19==$id' $$opts{base}.fofn.new`);
            $new_txt .= qq[new Illumina data for '$$opts{conf}{$id}{study} ($id)'. Import with:\n\n`awk -F"\\t" '\$19==$id' $$opts{base}.fofn.new | wr-import-hic -r \$TOLQCROOT/data -g '$$opts{conf}{$id}{subdir}' | wr add`\n\n];
            $new_txt .= `awk -F"\\t" '\$19==$id' $$opts{base}.fofn.new | cut -f2-5,20 | sort | uniq`;
            $new_txt .= qq[\n];
        }
        send_email($$opts{email}, "new $$opts{label} Illumina data in iRODS", $new_txt) if ($new_txt && $$opts{email});
    }
    else
    {
        system(qq[rm -f $$opts{base}.fofn.new]) if (-e "$$opts{base}.fofn.new");
    }
    if ($new || $diff)
    {
        write_info_to_file($info,"$$opts{base}.fofn.part");
    }
    system(qq[cmp --silent $$opts{base}.fofn $$opts{base}.fofn.part && rm $$opts{base}.fofn.part]) if (-s qq[$$opts{base}.fofn.part]);
    system(qq[cmp --silent $$opts{base}.json $$opts{base}.json.part && rm $$opts{base}.json.part]) if (-s qq[$$opts{base}.json.part]);
}

sub write_info_to_file
{
    my ($info,$file) = @_;
    open(my $fh, ">$file") || die("Could not write to file [$file]");
    foreach my $bam (sort keys %$info)
    {
        print $fh qq[$bam\t$$info{$bam}{info}];
        print $fh qq[\t$$info{$bam}{movie}] if (exists $$info{$bam}{movie});
        print $fh qq[\n];
    }
    close($fh);
}

sub send_email
{
    my ($email, $subject, $msg) = @_;
    open(my $mh,"| /usr/bin/mutt -s '$subject' $email");
    print $mh "$msg\n";
    close($mh);
}

sub get_wh_sample_info
{
    my ($sample) = @_;
    unless (exists $ENV{WAREHOUSE_DATABASE} && exists $ENV{WAREHOUSE_HOST} && exists $ENV{WAREHOUSE_PORT} && exists $ENV{WAREHOUSE_USER})
    {
        die("WARHOUSE environment variables must be set");
    }
    my $dbh = DBI->connect(qq[DBI:mysql:$ENV{WAREHOUSE_DATABASE};host=$ENV{WAREHOUSE_HOST};port=$ENV{WAREHOUSE_PORT}],qq[$ENV{WAREHOUSE_USER}]) or die($DBI::errstr);
    my $qh = $dbh->prepare("select public_name,common_name,supplier_name,accession_number,donor_id from current_samples where name = ?");
    $qh->execute($sample) or die($DBI::errstr);
    my @row = ('','','');
    @row = $qh->fetchrow_array();
    if (@row)
    {
        @row = map { defined $_ ? $_ : '' } @row;
    }
    return @row;
}

sub read_list
{
    my ($file) = @_;
    return {} unless (-s $file);
    my $list;
    open(my $fh, "<$file") || die("Could not read from file [$file]");
    while(<$fh>)
    {
        chomp;
        $$list{$_} = 1;
    }
    close($fh);
    return $list;
}
