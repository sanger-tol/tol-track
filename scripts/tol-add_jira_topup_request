#!/usr/bin/env perl
#
#    Copyright (C) 2020-2021 Genome Research Ltd.
#
#    Author: Shane McCarthy <sm15@sanger.ac.uk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

use strict;
use warnings;

use JIRA::REST;
use Carp;
use Getopt::Long;

my $jira = "$ENV{TOLJIRA}";
my $api = JIRA::REST->new("$jira/rest/api/2");

my %type_to_desc = (
    'clr' => 'PacBio CLR',
    'ccs' => 'PacBio CCS',
    'ont' => 'ONT',
    '10x' => '10X',
    'hic' => 'Hi-C',
);

my $opts = parse_params();
request_topups($opts);

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "\nAbout:  Add a Tree of Life Jira top-up request\n",
        "Usage:  tol-add_jira_topup_request [OPTIONS] <input>\n",
        "Input:  The input (STDIN or file) is expected to be a two-column TSV:\n",
        "           \$TOLID, \$info_about_data_so_far\n",
        "Output: The output is TSV of \$sample, \$jira_key, \$HYPERLINK.\n",
        "Options:\n",
        "   -a, --assignee STR  username of assignee (required)\n",
        "   -t, --type STR      top-up type: clr|ccs|ont|10x|hic (required)\n",
        "\n";
}

sub parse_params
{
    my $opts = { input=>'-' };
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-a' || $arg eq '--assignee' ) { $$opts{assignee} = shift(@ARGV); next; }
        if ( $arg eq '-t' || $arg eq '--type' ) { $$opts{type} = shift(@ARGV); next; }
        if ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        else {
            $$opts{input}=$arg;
            error("Too many input files or unknown option") if (@ARGV);
            last;
        }
    }
    error() if ($$opts{input} eq '-' && -t STDIN);
    error("Option --assignee is required") unless ($$opts{assignee});
    error("Option --type is required") unless ($$opts{type});
    $$opts{type} = lc($$opts{type});
    error("Option --type is required to be one of clr, ccs, ont, 10x, hic [ $$opts{type} ]") unless (exists $type_to_desc{"$$opts{type}"});
    return $opts;
}


sub request_topups
{
    my ($opts) = @_;

    while (<>)
    {
        chomp;
        my ($tolid,$info) = split /\t/;
        error("Require two columns as input") unless ($tolid && $info);
        my $issue = $api->POST('/issue', undef, {
            fields => {
                project   => { key => 'DTR' },
                issuetype => { name => 'Task' },
                assignee  => { name => "$$opts{assignee}" },
                summary   => qq[$tolid $type_to_desc{"$$opts{type}"}],
                description => "$info",
            }
        });
        sleep(2);
        print qq[$tolid\t=HYPERLINK("$jira/browse/$$issue{key}","$$issue{key}")\n];
    }
}